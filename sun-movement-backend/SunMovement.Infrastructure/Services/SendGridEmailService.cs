using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using SunMovement.Core.Interfaces;
using SunMovement.Core.Models;

namespace SunMovement.Infrastructure.Services
{
    /// <summary>
    /// Professional Email Service using SendGrid for production scalability
    /// Supports thousands of emails per day with high delivery rate
    /// </summary>
    public class SendGridEmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<SendGridEmailService> _logger;
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly string _fromEmail;
        private readonly string _fromName;

        public SendGridEmailService(
            IConfiguration configuration, 
            ILogger<SendGridEmailService> logger,
            HttpClient httpClient)
        {
            _configuration = configuration;
            _logger = logger;
            _httpClient = httpClient;
            _apiKey = _configuration["SendGrid:ApiKey"] ?? "";
            _fromEmail = _configuration["SendGrid:FromEmail"] ?? _configuration["Email:Sender"] ?? "";
            _fromName = _configuration["SendGrid:FromName"] ?? "Sun Movement Fitness Center";

            // Configure HttpClient for SendGrid API
            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Bearer {_apiKey}");
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "SunMovement/1.0");
        }

        public async Task<bool> SendVerificationCodeAsync(string email, string verificationCode, string firstName)
        {
            try
            {
                var subject = "üåü X√°c th·ª±c email ƒëƒÉng k√Ω - Sun Movement Fitness Center";
                var htmlContent = GenerateVerificationEmailTemplate(firstName, verificationCode);
                var plainTextContent = GenerateVerificationPlainText(firstName, verificationCode);

                return await SendEmailViaSendGridAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send verification email to {Email}", email);
                return false;
            }
        }

        public async Task<bool> SendWelcomeEmailAsync(string email, string firstName)
        {
            try
            {
                var subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Sun Movement!";
                var htmlContent = GenerateWelcomeEmailTemplate(firstName);
                var plainTextContent = $"Ch√†o m·ª´ng {firstName} ƒë·∫øn v·ªõi Sun Movement! C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω.";

                return await SendEmailViaSendGridAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send welcome email to {Email}", email);
                return false;
            }
        }

        public async Task<bool> SendPasswordResetEmailAsync(string email, string resetUrl, string firstName)
        {
            try
            {
                var subject = "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Sun Movement";
                var htmlContent = GeneratePasswordResetTemplate(firstName, resetUrl);
                var plainTextContent = $"Xin ch√†o {firstName}, click v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {resetUrl}";

                return await SendEmailViaSendGridAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send password reset email to {Email}", email);
                return false;
            }
        }

        public async Task SendOrderConfirmationAsync(Order order)
        {
            if (order?.Email != null)
            {
                await SendOrderConfirmationAsync(order.Email, order.Id.ToString(), order.TotalAmount);
            }
        }

        public async Task SendOrderConfirmationAsync(string to, string orderNumber, decimal totalAmount)
        {
            try
            {
                var subject = $"üì¶ X√°c nh·∫≠n ƒë∆°n h√†ng #{orderNumber} - Sun Movement";
                var htmlContent = GenerateOrderConfirmationTemplate(orderNumber, totalAmount);
                var plainTextContent = $"ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. T·ªïng ti·ªÅn: {totalAmount:C}";

                await SendEmailViaSendGridAsync(to, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send order confirmation to {Email}", to);
            }
        }

        public async Task SendOrderStatusUpdateAsync(Order order)
        {
            if (order?.Email != null)
            {
                try
                {
                    var subject = $"üìã C·∫≠p nh·∫≠t ƒë∆°n h√†ng #{order.Id} - Sun Movement";
                    var htmlContent = GenerateOrderStatusUpdateTemplate(order.Id.ToString(), order.Status.ToString());
                    var plainTextContent = $"ƒê∆°n h√†ng #{order.Id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {order.Status}";

                    await SendEmailViaSendGridAsync(order.Email, subject, htmlContent, plainTextContent);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send order status update for order {OrderId}", order.Id);
                }
            }
        }

        public async Task SendShippingConfirmationAsync(string to, string orderNumber, string trackingNumber)
        {
            try
            {
                var subject = $"üöö ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c giao - Sun Movement";
                var htmlContent = GenerateShippingConfirmationTemplate(orderNumber, trackingNumber);
                var plainTextContent = $"ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c giao. M√£ tracking: {trackingNumber}";

                await SendEmailViaSendGridAsync(to, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send shipping confirmation to {Email}", to);
            }
        }

        public async Task SendContactNotificationAsync(ContactMessage message)
        {
            if (message != null)
            {
                try
                {
                    var adminEmail = _configuration["Email:ContactNotifications"] ?? _fromEmail;
                    var subject = $"üìû Li√™n h·ªá m·ªõi: {message.Subject}";
                    var htmlContent = GenerateContactNotificationTemplate(message);
                    var plainTextContent = $"Li√™n h·ªá t·ª´: {message.Name} ({message.Email})\nN·ªôi dung: {message.Message}";

                    await SendEmailViaSendGridAsync(adminEmail, subject, htmlContent, plainTextContent);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send contact notification");
                }
            }
        }

        public async Task SendContactResponseAsync(string to, string subject, string message)
        {
            try
            {
                var emailSubject = $"üí¨ Re: {subject} - Sun Movement";
                var htmlContent = GenerateContactResponseTemplate(message);
                var plainTextContent = message;

                await SendEmailViaSendGridAsync(to, emailSubject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send contact response to {Email}", to);
            }
        }

        private async Task<bool> SendEmailViaSendGridAsync(string to, string subject, string htmlContent, string plainTextContent)
        {
            try
            {
                // Validate configuration
                if (string.IsNullOrEmpty(_apiKey) || _apiKey.StartsWith("SG.") == false)
                {
                    _logger.LogError("SendGrid API key is not configured or invalid");
                    return false;
                }

                if (string.IsNullOrEmpty(_fromEmail))
                {
                    _logger.LogError("From email is not configured");
                    return false;
                }

                // Prepare SendGrid API payload
                var emailData = new
                {
                    personalizations = new[]
                    {
                        new
                        {
                            to = new[] { new { email = to } },
                            subject = subject
                        }
                    },
                    from = new { email = _fromEmail, name = _fromName },
                    content = new[]
                    {
                        new { type = "text/plain", value = plainTextContent },
                        new { type = "text/html", value = htmlContent }
                    },
                    tracking_settings = new
                    {
                        click_tracking = new { enable = true },
                        open_tracking = new { enable = true }
                    }
                };

                var json = JsonSerializer.Serialize(emailData, new JsonSerializerOptions 
                { 
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase 
                });
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                // Send via SendGrid API
                var response = await _httpClient.PostAsync("https://api.sendgrid.com/v3/mail/send", content);

                if (response.IsSuccessStatusCode)
                {
                    _logger.LogInformation("Email sent successfully via SendGrid to {Email} with subject: {Subject}", to, subject);
                    return true;
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError("SendGrid API error: {StatusCode} - {Content}", response.StatusCode, errorContent);
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception sending email via SendGrid to {Email}: {Message}", to, ex.Message);
                return false;
            }
        }

        #region Email Templates

        private string GenerateVerificationEmailTemplate(string firstName, string verificationCode)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>X√°c th·ª±c email - Sun Movement</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }}
        .container {{ max-width: 600px; margin: 0 auto; background-color: #ffffff; }}
        .header {{ background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center; }}
        .header h1 {{ margin: 0; font-size: 24px; }}
        .content {{ padding: 30px; }}
        .otp-box {{ background-color: #fff3cd; border: 2px dashed #f39c12; border-radius: 10px; padding: 20px; text-align: center; margin: 20px 0; }}
        .otp-code {{ font-size: 32px; font-weight: bold; color: #e67e22; letter-spacing: 8px; }}
        .button {{ display: inline-block; background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 15px 30px; text-decoration: none; border-radius: 25px; font-weight: bold; margin: 20px 0; }}
        .footer {{ background-color: #2c3e50; color: white; padding: 20px; text-align: center; font-size: 12px; }}
        .social-links {{ margin: 15px 0; }}
        .social-links a {{ color: #f39c12; text-decoration: none; margin: 0 10px; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üåü Sun Movement Fitness Center</h1>
            <p>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {firstName}!</h2>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Sun Movement Fitness Center</strong>. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi:</p>
            
            <div class='otp-box'>
                <p>M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                <div class='otp-code'>{verificationCode}</div>
                <p><small>M√£ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</small></p>
            </div>
            
            <p><strong>H∆∞·ªõng d·∫´n:</strong></p>
            <ol>
                <li>Quay l·∫°i trang ƒëƒÉng k√Ω</li>
                <li>Nh·∫≠p m√£ OTP: <strong>{verificationCode}</strong></li>
                <li>Ho√†n t·∫•t k√≠ch ho·∫°t t√†i kho·∫£n</li>
            </ol>
            
            <p><strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong></p>
            <ul>
                <li>Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</li>
                <li>M√£ ch·ªâ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</li>
                <li>N·∫øu kh√¥ng ph·∫£i b·∫°n ƒëƒÉng k√Ω, vui l√≤ng b·ªè qua email n√†y</li>
            </ul>
            
            <div style='text-align: center; margin: 30px 0;'>
                <p>Sau khi x√°c th·ª±c th√†nh c√¥ng, b·∫°n s·∫Ω c√≥ th·ªÉ:</p>
                <p>üí™ ƒê·∫∑t l·ªãch t·∫≠p gym<br>üèÉ‚Äç‚ôÄÔ∏è Tham gia c√°c l·ªõp fitness<br>üõí Mua s·∫Øm thi·∫øt b·ªã th·ªÉ thao<br>üì∞ ƒê·ªçc b√†i vi·∫øt s·ª©c kh·ªèe</p>
            </div>
        </div>
        <div class='footer'>
            <p>¬© 2025 Sun Movement Fitness Center. All rights reserved.</p>
            <div class='social-links'>
                <a href='#'>Facebook</a> | 
                <a href='#'>Instagram</a> | 
                <a href='#'>Website</a>
            </div>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            <p>N·∫øu c·∫ßn h·ªó tr·ª£, h√£y li√™n h·ªá: support@sunmovement.com</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateVerificationPlainText(string firstName, string verificationCode)
        {
            return $@"Sun Movement Fitness Center - X√°c th·ª±c email

Xin ch√†o {firstName}!

C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Sun Movement Fitness Center. 

M√£ OTP x√°c th·ª±c c·ªßa b·∫°n: {verificationCode}

M√£ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t. Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.

Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.

Tr√¢n tr·ªçng,
Sun Movement Team";
        }

        private string GenerateWelcomeEmailTemplate(string firstName)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ padding: 30px; background-color: #f9f9f9; }}
        .feature {{ background-color: white; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #f39c12; }}
        .button {{ display: inline-block; background: #f39c12; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üéâ Ch√†o m·ª´ng {firstName}!</h1>
            <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng</p>
        </div>
        <div class='content'>
            <h2>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness c·ªßa b·∫°n!</h2>
            <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n c·ªßa <strong>Sun Movement Fitness Center</strong>. D∆∞·ªõi ƒë√¢y l√† nh·ªØng g√¨ b·∫°n c√≥ th·ªÉ l√†m:</p>
            
            <div class='feature'>
                <h3>üí™ ƒê·∫∑t l·ªãch t·∫≠p gym</h3>
                <p>ƒê·∫∑t l·ªãch t·∫≠p v·ªõi HLV c√° nh√¢n ho·∫∑c tham gia c√°c l·ªõp group fitness</p>
            </div>
            
            <div class='feature'>
                <h3>üõí Mua s·∫Øm thi·∫øt b·ªã</h3>
                <p>Kh√°m ph√° c·ª≠a h√†ng thi·∫øt b·ªã th·ªÉ thao v·ªõi gi√° ∆∞u ƒë√£i cho th√†nh vi√™n</p>
            </div>
            
            <div class='feature'>
                <h3>üì∞ B√†i vi·∫øt s·ª©c kh·ªèe</h3>
                <p>ƒê·ªçc c√°c b√†i vi·∫øt v·ªÅ dinh d∆∞·ª°ng, t·∫≠p luy·ªán v√† l·ªëi s·ªëng l√†nh m·∫°nh</p>
            </div>
            
            <div style='text-align: center;'>
                <a href='#' class='button'>Kh√°m ph√° ngay</a>
            </div>
            
            <p>N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi n√†o, ƒë·ª´ng ng·∫ßn ng·∫°i li√™n h·ªá v·ªõi ch√∫ng t√¥i!</p>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Sun Movement</p>
            <p>¬© 2025 Sun Movement Fitness Center</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GeneratePasswordResetTemplate(string firstName, string resetUrl)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; background-color: #f9f9f9; }}
        .button {{ display: inline-block; background: #e74c3c; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
        .warning {{ background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {firstName}!</h2>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Sun Movement c·ªßa b·∫°n.</p>
            
            <div style='text-align: center;'>
                <a href='{resetUrl}' class='button'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            </div>
            
            <div class='warning'>
                <h3>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h3>
                <ul>
                    <li>Link n√†y c√≥ hi·ªáu l·ª±c trong <strong>30 ph√∫t</strong></li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng link n√†y n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</li>
                    <li>N·∫øu kh√¥ng ph·∫£i b·∫°n, vui l√≤ng b·ªè qua email n√†y</li>
                </ul>
            </div>
            
            <p>N·∫øu n√∫t kh√¥ng ho·∫°t ƒë·ªông, copy link sau v√†o tr√¨nh duy·ªát:</p>
            <p style='word-break: break-all; background-color: #f8f9fa; padding: 10px; border-radius: 5px;'>{resetUrl}</p>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Sun Movement</p>
            <p>¬© 2025 Sun Movement Fitness Center</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateOrderConfirmationTemplate(string orderNumber, decimal totalAmount)
        {
            return $@"
<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
    <div style='background: linear-gradient(135deg, #27ae60, #2ecc71); color: white; padding: 30px; text-align: center;'>
        <h1>üì¶ X√°c nh·∫≠n ƒë∆°n h√†ng</h1>
        <p>ƒê∆°n h√†ng #{orderNumber}</p>
    </div>
    <div style='padding: 30px; background-color: #f9f9f9;'>
        <h2>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm!</h2>
        <p>ƒê∆°n h√†ng c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n v√† ƒëang ƒë∆∞·ª£c x·ª≠ l√Ω.</p>
        <div style='background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0;'>
            <p><strong>M√£ ƒë∆°n h√†ng:</strong> #{orderNumber}</p>
            <p><strong>T·ªïng ti·ªÅn:</strong> {totalAmount:C}</p>
            <p><strong>Tr·∫°ng th√°i:</strong> ƒêang x·ª≠ l√Ω</p>
        </div>
        <p>Ch√∫ng t√¥i s·∫Ω th√¥ng b√°o khi ƒë∆°n h√†ng ƒë∆∞·ª£c giao cho ƒë∆°n v·ªã v·∫≠n chuy·ªÉn.</p>
    </div>
</div>";
        }

        private string GenerateOrderStatusUpdateTemplate(string orderNumber, string status)
        {
            return $@"
<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
    <div style='background: linear-gradient(135deg, #3498db, #2980b9); color: white; padding: 30px; text-align: center;'>
        <h1>üìã C·∫≠p nh·∫≠t ƒë∆°n h√†ng</h1>
    </div>
    <div style='padding: 30px; background-color: #f9f9f9;'>
        <h2>ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t</h2>
        <div style='background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0;'>
            <p><strong>Tr·∫°ng th√°i m·ªõi:</strong> {status}</p>
        </div>
        <p>C·∫£m ∆°n b·∫°n ƒë√£ mua s·∫Øm t·∫°i Sun Movement!</p>
    </div>
</div>";
        }

        private string GenerateShippingConfirmationTemplate(string orderNumber, string trackingNumber)
        {
            return $@"
<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
    <div style='background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center;'>
        <h1>üöö ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c giao</h1>
    </div>
    <div style='padding: 30px; background-color: #f9f9f9;'>
        <h2>ƒê∆°n h√†ng #{orderNumber} ƒëang tr√™n ƒë∆∞·ªùng giao ƒë·∫øn b·∫°n!</h2>
        <div style='background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0;'>
            <p><strong>M√£ tracking:</strong> {trackingNumber}</p>
        </div>
        <p>B·∫°n c√≥ th·ªÉ theo d√µi ƒë∆°n h√†ng b·∫±ng m√£ tracking tr√™n.</p>
    </div>
</div>";
        }

        private string GenerateContactNotificationTemplate(ContactMessage message)
        {
            return $@"
<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
    <div style='background: linear-gradient(135deg, #9b59b6, #8e44ad); color: white; padding: 30px; text-align: center;'>
        <h1>üìû Li√™n h·ªá m·ªõi t·ª´ website</h1>
    </div>
    <div style='padding: 30px; background-color: #f9f9f9;'>
        <div style='background-color: white; padding: 20px; border-radius: 5px;'>
            <p><strong>T·ª´:</strong> {message.Name}</p>
            <p><strong>Email:</strong> {message.Email}</p>
            <p><strong>Phone:</strong> {message.Phone}</p>
            <p><strong>Ch·ªß ƒë·ªÅ:</strong> {message.Subject}</p>
            <p><strong>N·ªôi dung:</strong></p>
            <div style='background-color: #f8f9fa; padding: 15px; border-radius: 5px;'>
                {message.Message.Replace(Environment.NewLine, "<br>")}
            </div>
        </div>
    </div>
</div>";
        }

        private string GenerateContactResponseTemplate(string message)
        {
            return $@"
<div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
    <div style='background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center;'>
        <h1>üí¨ Ph·∫£n h·ªìi t·ª´ Sun Movement</h1>
    </div>
    <div style='padding: 30px; background-color: #f9f9f9;'>
        <h2>C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá!</h2>
        <div style='background-color: white; padding: 20px; border-radius: 5px; margin: 20px 0;'>
            {message.Replace(Environment.NewLine, "<br>")}
        </div>
        <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Sun Movement</p>
    </div>
</div>";
        }

        #endregion
    }
}
