using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Net.Http;
using System.Text;
using System.Text.Json;
using System.Threading.Tasks;
using SunMovement.Core.Interfaces;
using SunMovement.Core.Models;

namespace SunMovement.Infrastructure.Services
{
    /// <summary>
    /// Zoho Mail API Email Service - Professional business email solution
    /// Zoho Mail provides excellent deliverability, business features, and competitive pricing
    /// Perfect for small to medium businesses with professional email requirements
    /// </summary>
    public class ZohoEmailService : IEmailService
    {
        private readonly IConfiguration _configuration;
        private readonly ILogger<ZohoEmailService> _logger;
        private readonly HttpClient _httpClient;
        private readonly string _apiKey;
        private readonly string _fromEmail;
        private readonly string _fromName;        private readonly string _baseUrl;
        private readonly string _accountId;

        public ZohoEmailService(
            IConfiguration configuration,
            ILogger<ZohoEmailService> logger,
            HttpClient httpClient)
        {
            _configuration = configuration;
            _logger = logger;
            _httpClient = httpClient;
            _apiKey = _configuration["Zoho:ApiKey"] ?? "";
            _fromEmail = _configuration["Zoho:FromEmail"] ?? _configuration["Email:Sender"] ?? "";
            _fromName = _configuration["Zoho:FromName"] ?? "Sun Movement Fitness Center";            _baseUrl = _configuration["Zoho:BaseUrl"] ?? "https://www.mail.zoho.com/api";
            _accountId = _configuration["Zoho:AccountId"] ?? "";

            // Configure HttpClient for Zoho Mail API
            _httpClient.DefaultRequestHeaders.Add("Authorization", $"Zoho-oauthtoken {_apiKey}");
            _httpClient.DefaultRequestHeaders.Add("User-Agent", "SunMovement/1.0");
        }

        public async Task<bool> SendVerificationCodeAsync(string email, string verificationCode, string firstName)
        {
            try
            {
                var subject = "üåü X√°c th·ª±c email ƒëƒÉng k√Ω - Sun Movement Fitness Center";
                var htmlContent = GenerateVerificationEmailTemplate(firstName, verificationCode);
                var plainTextContent = GenerateVerificationPlainText(firstName, verificationCode);

                return await SendEmailViaZohoAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send verification email to {Email}", email);
                return false;
            }
        }

        public async Task<bool> SendWelcomeEmailAsync(string email, string firstName)
        {
            try
            {
                var subject = "üéâ Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Sun Movement!";
                var htmlContent = GenerateWelcomeEmailTemplate(firstName);
                var plainTextContent = $"Ch√†o m·ª´ng {firstName} ƒë·∫øn v·ªõi Sun Movement! C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω.";

                return await SendEmailViaZohoAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send welcome email to {Email}", email);
                return false;
            }
        }

        public async Task<bool> SendPasswordResetEmailAsync(string email, string resetUrl, string firstName)
        {
            try
            {
                var subject = "üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u - Sun Movement";
                var htmlContent = GeneratePasswordResetTemplate(firstName, resetUrl);
                var plainTextContent = $"Xin ch√†o {firstName}, click v√†o link sau ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: {resetUrl}";

                return await SendEmailViaZohoAsync(email, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send password reset email to {Email}", email);
                return false;
            }
        }

        public async Task SendOrderConfirmationAsync(Order order)
        {
            if (order?.Email != null)
            {
                await SendOrderConfirmationAsync(order.Email, order.Id.ToString(), order.TotalAmount);
            }
        }

        public async Task SendOrderConfirmationAsync(string to, string orderNumber, decimal totalAmount)
        {
            try
            {
                var subject = $"üì¶ X√°c nh·∫≠n ƒë∆°n h√†ng #{orderNumber} - Sun Movement";
                var htmlContent = GenerateOrderConfirmationTemplate(orderNumber, totalAmount);
                var plainTextContent = $"ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. T·ªïng ti·ªÅn: {totalAmount:C}";

                await SendEmailViaZohoAsync(to, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send order confirmation to {Email}", to);
            }
        }

        public async Task SendOrderStatusUpdateAsync(Order order)
        {
            if (order?.Email != null)
            {
                try
                {
                    var subject = $"üìã C·∫≠p nh·∫≠t ƒë∆°n h√†ng #{order.Id} - Sun Movement";
                    var htmlContent = GenerateOrderStatusUpdateTemplate(order.Id.ToString(), order.Status.ToString());
                    var plainTextContent = $"ƒê∆°n h√†ng #{order.Id} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {order.Status}";

                    await SendEmailViaZohoAsync(order.Email, subject, htmlContent, plainTextContent);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send order status update for order {OrderId}", order.Id);
                }
            }
        }

        public async Task SendShippingConfirmationAsync(string to, string orderNumber, string trackingNumber)
        {
            try
            {
                var subject = $"üöö ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c giao - Sun Movement";
                var htmlContent = GenerateShippingConfirmationTemplate(orderNumber, trackingNumber);
                var plainTextContent = $"ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c giao. M√£ tracking: {trackingNumber}";

                await SendEmailViaZohoAsync(to, subject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send shipping confirmation to {Email}", to);
            }
        }

        public async Task SendContactNotificationAsync(ContactMessage message)
        {
            if (message != null)
            {
                try
                {
                    var adminEmail = _configuration["Email:ContactNotifications"] ?? _fromEmail;
                    var subject = $"üìû Li√™n h·ªá m·ªõi: {message.Subject}";
                    var htmlContent = GenerateContactNotificationTemplate(message);
                    var plainTextContent = $"Li√™n h·ªá t·ª´: {message.Name} ({message.Email})\nN·ªôi dung: {message.Message}";

                    await SendEmailViaZohoAsync(adminEmail, subject, htmlContent, plainTextContent);
                }
                catch (Exception ex)
                {
                    _logger.LogError(ex, "Failed to send contact notification");
                }
            }
        }

        public async Task SendContactResponseAsync(string to, string subject, string message)
        {
            try
            {
                var emailSubject = $"üí¨ Re: {subject} - Sun Movement";
                var htmlContent = GenerateContactResponseTemplate(message);
                var plainTextContent = message;

                await SendEmailViaZohoAsync(to, emailSubject, htmlContent, plainTextContent);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Failed to send contact response to {Email}", to);
            }
        }        private async Task<bool> SendEmailViaZohoAsync(string to, string subject, string htmlContent, string plainTextContent)
        {
            try
            {
                // Validate configuration
                if (string.IsNullOrEmpty(_apiKey))
                {
                    _logger.LogError("Zoho API key is not configured");
                    return false;
                }

                if (string.IsNullOrEmpty(_fromEmail))
                {
                    _logger.LogError("From email is not configured");
                    return false;
                }

                if (string.IsNullOrEmpty(_accountId))
                {
                    _logger.LogError("Zoho Account ID is not configured");
                    return false;
                }

                // Prepare Zoho Mail API payload according to official documentation
                var emailData = new
                {
                    fromAddress = _fromEmail,
                    toAddress = to,
                    ccAddress = "",
                    bccAddress = "",
                    subject = subject,
                    content = htmlContent,
                    mailFormat = "html",
                    charset = "UTF-8"
                };

                var json = JsonSerializer.Serialize(emailData, new JsonSerializerOptions 
                { 
                    PropertyNamingPolicy = JsonNamingPolicy.CamelCase 
                });
                var content = new StringContent(json, Encoding.UTF8, "application/json");

                // Use correct Zoho Mail API endpoint
                var endpoint = $"{_baseUrl}/accounts/{_accountId}/messages";
                var response = await _httpClient.PostAsync(endpoint, content);

                if (response.IsSuccessStatusCode)
                {
                    var responseContent = await response.Content.ReadAsStringAsync();
                    _logger.LogInformation("Email sent successfully via Zoho Mail to {Email} with subject: {Subject}. Response: {Response}", 
                        to, subject, responseContent);
                    return true;
                }
                else
                {
                    var errorContent = await response.Content.ReadAsStringAsync();
                    _logger.LogError("Zoho Mail API error: {StatusCode} - {Content}", response.StatusCode, errorContent);
                    
                    // Handle specific Zoho error codes
                    if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        _logger.LogError("Zoho API authentication failed. Check your API key and OAuth token.");
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.Forbidden)
                    {
                        _logger.LogError("Zoho API access forbidden. Check your account permissions and Account ID.");
                    }
                    else if (response.StatusCode == System.Net.HttpStatusCode.BadRequest)
                    {
                        _logger.LogError("Zoho API bad request. Check your email format and required fields.");
                    }
                    
                    return false;
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "Exception sending email via Zoho Mail to {Email}: {Message}", to, ex.Message);
                return false;
            }
        }

        #region Email Templates

        private string GenerateVerificationEmailTemplate(string firstName, string verificationCode)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <meta name='viewport' content='width=device-width, initial-scale=1.0'>
    <title>X√°c th·ª±c email - Sun Movement</title>
    <style>
        body {{ font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; line-height: 1.6; color: #333; margin: 0; padding: 0; background-color: #f4f4f4; }}
        .container {{ max-width: 600px; margin: 0 auto; background-color: #ffffff; }}
        .header {{ background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center; }}
        .header h1 {{ margin: 0; font-size: 24px; }}
        .content {{ padding: 30px; }}
        .otp-box {{ background-color: #fff3cd; border: 2px dashed #f39c12; border-radius: 10px; padding: 20px; text-align: center; margin: 20px 0; }}
        .otp-code {{ font-size: 32px; font-weight: bold; color: #e67e22; letter-spacing: 8px; }}
        .footer {{ background-color: #2c3e50; color: white; padding: 20px; text-align: center; font-size: 12px; }}
        .powered-by {{ margin-top: 10px; font-size: 10px; color: #95a5a6; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üåü Sun Movement Fitness Center</h1>
            <p>X√°c th·ª±c t√†i kho·∫£n c·ªßa b·∫°n</p>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {firstName}!</h2>
            <p>C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i <strong>Sun Movement Fitness Center</strong>. ƒê·ªÉ ho√†n t·∫•t qu√° tr√¨nh ƒëƒÉng k√Ω, vui l√≤ng s·ª≠ d·ª•ng m√£ OTP b√™n d∆∞·ªõi:</p>
            
            <div class='otp-box'>
                <p>M√£ x√°c th·ª±c c·ªßa b·∫°n:</p>
                <div class='otp-code'>{verificationCode}</div>
                <p><small>M√£ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t</small></p>
            </div>
            
            <p><strong>‚ö†Ô∏è L∆∞u √Ω b·∫£o m·∫≠t:</strong> Kh√¥ng chia s·∫ª m√£ OTP v·ªõi b·∫•t k·ª≥ ai</p>
            
            <div style='margin-top: 30px; padding: 15px; background-color: #ecf0f1; border-radius: 5px;'>
                <p><strong>L·ª£i √≠ch th√†nh vi√™n Sun Movement:</strong></p>
                <ul>
                    <li>üí™ ƒê·∫∑t l·ªãch t·∫≠p gym v·ªõi HLV chuy√™n nghi·ªáp</li>
                    <li>üèÉ‚Äç‚ôÄÔ∏è Tham gia c√°c l·ªõp fitness group</li>
                    <li>üõí ∆Øu ƒë√£i thi·∫øt b·ªã th·ªÉ thao</li>
                    <li>üì∞ B√†i vi·∫øt s·ª©c kh·ªèe & dinh d∆∞·ª°ng</li>
                </ul>
            </div>
        </div>
        <div class='footer'>
            <p>¬© 2025 Sun Movement Fitness Center. All rights reserved.</p>
            <p>Email n√†y ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông, vui l√≤ng kh√¥ng reply.</p>
            <div class='powered-by'>Powered by Zoho Mail - Professional Business Email</div>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateVerificationPlainText(string firstName, string verificationCode)
        {
            return $@"Sun Movement Fitness Center - X√°c th·ª±c email

Xin ch√†o {firstName}!

C·∫£m ∆°n b·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n t·∫°i Sun Movement Fitness Center. 

M√£ OTP x√°c th·ª±c c·ªßa b·∫°n: {verificationCode}
M√£ c√≥ hi·ªáu l·ª±c trong 15 ph√∫t.

Vui l√≤ng nh·∫≠p m√£ n√†y ƒë·ªÉ ho√†n t·∫•t ƒëƒÉng k√Ω.
Kh√¥ng chia s·∫ª m√£ n√†y v·ªõi b·∫•t k·ª≥ ai.

Tr√¢n tr·ªçng,
Sun Movement Team

Powered by Zoho Mail";
        }

        private string GenerateWelcomeEmailTemplate(string firstName)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #f39c12, #e67e22); color: white; padding: 30px; text-align: center; border-radius: 10px 10px 0 0; }}
        .content {{ padding: 30px; background-color: #f9f9f9; }}
        .feature {{ background-color: white; padding: 15px; margin: 10px 0; border-radius: 5px; border-left: 4px solid #f39c12; }}
        .button {{ display: inline-block; background: #f39c12; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üéâ Ch√†o m·ª´ng {firstName}!</h1>
            <p>T√†i kho·∫£n c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t th√†nh c√¥ng</p>
        </div>
        <div class='content'>
            <h2>B·∫Øt ƒë·∫ßu h√†nh tr√¨nh fitness c·ªßa b·∫°n!</h2>
            <p>Ch√∫c m·ª´ng b·∫°n ƒë√£ tr·ªü th√†nh th√†nh vi√™n c·ªßa <strong>Sun Movement Fitness Center</strong>.</p>
            
            <div class='feature'>
                <h3>üí™ ƒê·∫∑t l·ªãch t·∫≠p gym</h3>
                <p>ƒê·∫∑t l·ªãch t·∫≠p v·ªõi HLV c√° nh√¢n ho·∫∑c tham gia c√°c l·ªõp group fitness</p>
            </div>
            
            <div class='feature'>
                <h3>üõí Mua s·∫Øm thi·∫øt b·ªã</h3>
                <p>Kh√°m ph√° c·ª≠a h√†ng thi·∫øt b·ªã th·ªÉ thao v·ªõi gi√° ∆∞u ƒë√£i cho th√†nh vi√™n</p>
            </div>
            
            <div style='text-align: center;'>
                <a href='#' class='button'>Kh√°m ph√° ngay</a>
            </div>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Sun Movement</p>
            <p>¬© 2025 Sun Movement Fitness Center</p>
            <p><small>Powered by Zoho Mail</small></p>
        </div>
    </div>
</body>
</html>";
        }

        private string GeneratePasswordResetTemplate(string firstName, string resetUrl)
        {
            return $@"
<!DOCTYPE html>
<html>
<head>
    <meta charset='utf-8'>
    <style>
        body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
        .container {{ max-width: 600px; margin: 0 auto; padding: 20px; }}
        .header {{ background: linear-gradient(135deg, #e74c3c, #c0392b); color: white; padding: 30px; text-align: center; }}
        .content {{ padding: 30px; background-color: #f9f9f9; }}
        .button {{ display: inline-block; background: #e74c3c; color: white; padding: 15px 30px; text-decoration: none; border-radius: 5px; margin: 20px 0; }}
        .warning {{ background-color: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; }}
        .footer {{ text-align: center; padding: 20px; color: #666; }}
    </style>
</head>
<body>
    <div class='container'>
        <div class='header'>
            <h1>üîê ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</h1>
        </div>
        <div class='content'>
            <h2>Xin ch√†o {firstName}!</h2>
            <p>Ch√∫ng t√¥i nh·∫≠n ƒë∆∞·ª£c y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u cho t√†i kho·∫£n Sun Movement c·ªßa b·∫°n.</p>
            
            <div style='text-align: center;'>
                <a href='{resetUrl}' class='button'>ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u</a>
            </div>
            
            <div class='warning'>
                <h3>‚ö†Ô∏è L∆∞u √Ω quan tr·ªçng:</h3>
                <ul>
                    <li>Link n√†y c√≥ hi·ªáu l·ª±c trong <strong>30 ph√∫t</strong></li>
                    <li>Ch·ªâ s·ª≠ d·ª•ng link n√†y n·∫øu b·∫°n ƒë√£ y√™u c·∫ßu ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u</li>
                    <li>N·∫øu kh√¥ng ph·∫£i b·∫°n, vui l√≤ng b·ªè qua email n√†y</li>
                </ul>
            </div>
        </div>
        <div class='footer'>
            <p>Tr√¢n tr·ªçng,<br>ƒê·ªôi ng≈© Sun Movement</p>
            <p>¬© 2025 Sun Movement Fitness Center</p>
        </div>
    </div>
</body>
</html>";
        }

        private string GenerateOrderConfirmationTemplate(string orderNumber, decimal totalAmount)
        {
            return $@"<div>üì¶ ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n. T·ªïng ti·ªÅn: {totalAmount:C}</div>";
        }

        private string GenerateOrderStatusUpdateTemplate(string orderNumber, string status)
        {
            return $@"<div>üìã ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t: {status}</div>";
        }

        private string GenerateShippingConfirmationTemplate(string orderNumber, string trackingNumber)
        {
            return $@"<div>üöö ƒê∆°n h√†ng #{orderNumber} ƒë√£ ƒë∆∞·ª£c giao. M√£ tracking: {trackingNumber}</div>";
        }

        private string GenerateContactNotificationTemplate(ContactMessage message)
        {
            return $@"<div>üìû Li√™n h·ªá t·ª´: {message.Name} ({message.Email})<br>N·ªôi dung: {message.Message}</div>";
        }

        private string GenerateContactResponseTemplate(string message)
        {
            return $@"<div>üí¨ {message}</div>";
        }

        #endregion
    }
}
