@{
    ViewData["Title"] = "User Behavior Analysis";
    Layout = "_AdminLayout";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">User Behavior Analysis</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a asp-area="Admin" asp-controller="HomeAdmin" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-action="Dashboard">Analytics</a></li>
        <li class="breadcrumb-item active">User Behavior</li>
    </ol>
    
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-area me-1"></i>
                    User Engagement Over Time
                </div>
                <div class="card-body">
                    <canvas id="userEngagementChart" width="100%" height="40"></canvas>
                </div>
                <div class="card-footer small text-muted">
                    Last updated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-chart-bar me-1"></i>
                    Most Viewed Product Categories
                </div>
                <div class="card-body">
                    <canvas id="categoryViewsChart" width="100%" height="40"></canvas>
                </div>
                <div class="card-footer small text-muted">
                    Last updated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
                </div>
            </div>
        </div>
    </div>
    
    <div class="card mb-4">
        <div class="card-header">
            <i class="fas fa-table me-1"></i>
            Top User Interactions
        </div>
        <div class="card-body">
            <table id="userInteractionsTable" class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>User</th>
                        <th>Product</th>
                        <th>Interaction Type</th>
                        <th>Time (seconds)</th>
                        <th>Date</th>
                        <th>Score</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var interaction in ViewBag.TopInteractions ?? new List<dynamic>())
                    {
                        <tr>
                            <td>@interaction.UserEmail</td>
                            <td>@interaction.ProductName</td>
                            <td>
                                @if (interaction.Purchased) { <span class="badge bg-success">Purchased</span> }
                                @if (interaction.AddedToCart) { <span class="badge bg-primary">Cart</span> }
                                @if (interaction.AddedToWishlist) { <span class="badge bg-info">Wishlist</span> }
                                @if (interaction.Viewed) { <span class="badge bg-secondary">Viewed</span> }
                            </td>
                            <td>@interaction.ViewTimeSeconds</td>
                            <td>@interaction.CreatedAt.ToString("yyyy-MM-dd HH:mm")</td>
                            <td>@interaction.InteractionScore</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <div class="card-footer small text-muted">
            Last updated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
        </div>
    </div>
    
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-users me-1"></i>
                    User Segments
                </div>
                <div class="card-body">
                    <canvas id="userSegmentsChart" width="100%" height="40"></canvas>
                </div>
                <div class="card-footer small text-muted">
                    Last updated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
                </div>
            </div>
        </div>
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-clock me-1"></i>
                    Average Time Spent by Category
                </div>
                <div class="card-body">
                    <canvas id="timeSpentChart" width="100%" height="40"></canvas>
                </div>
                <div class="card-footer small text-muted">
                    Last updated @DateTime.Now.ToString("yyyy-MM-dd HH:mm")
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Load charts when DOM is ready
        document.addEventListener('DOMContentLoaded', function() {
            // User Engagement Chart
            var userCtx = document.getElementById('userEngagementChart').getContext('2d');
            new Chart(userCtx, {
                type: 'line',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.EngagementDates ?? new List<string>())),
                    datasets: [{
                        label: 'Page Views',
                        data: @Html.Raw(Json.Serialize(ViewBag.PageViews ?? new List<int>())),
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        borderColor: 'rgba(0, 123, 255, 1)',
                        tension: 0.4,
                        fill: true
                    },
                    {
                        label: 'Interactions',
                        data: @Html.Raw(Json.Serialize(ViewBag.Interactions ?? new List<int>())),
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        borderColor: 'rgba(40, 167, 69, 1)',
                        tension: 0.4,
                        fill: true
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        y: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Product Categories Chart
            var categoryCtx = document.getElementById('categoryViewsChart').getContext('2d');
            new Chart(categoryCtx, {
                type: 'bar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.Categories ?? new List<string>())),
                    datasets: [{
                        label: 'Views',
                        data: @Html.Raw(Json.Serialize(ViewBag.CategoryViews ?? new List<int>())),
                        backgroundColor: [
                            'rgba(0, 123, 255, 0.7)',
                            'rgba(40, 167, 69, 0.7)',
                            'rgba(255, 193, 7, 0.7)',
                            'rgba(220, 53, 69, 0.7)',
                            'rgba(23, 162, 184, 0.7)',
                            'rgba(108, 117, 125, 0.7)'
                        ]
                    }]
                },
                options: {
                    maintainAspectRatio: false
                }
            });
            
            // User Segments Chart
            var segmentsCtx = document.getElementById('userSegmentsChart').getContext('2d');
            new Chart(segmentsCtx, {
                type: 'pie',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.Segments ?? new List<string>())),
                    datasets: [{
                        data: @Html.Raw(Json.Serialize(ViewBag.SegmentCounts ?? new List<int>())),
                        backgroundColor: [
                            'rgba(0, 123, 255, 0.7)',
                            'rgba(40, 167, 69, 0.7)',
                            'rgba(255, 193, 7, 0.7)',
                            'rgba(220, 53, 69, 0.7)',
                            'rgba(23, 162, 184, 0.7)'
                        ]
                    }]
                },
                options: {
                    maintainAspectRatio: false
                }
            });
            
            // Time Spent Chart
            var timeCtx = document.getElementById('timeSpentChart').getContext('2d');
            new Chart(timeCtx, {
                type: 'horizontalBar',
                data: {
                    labels: @Html.Raw(Json.Serialize(ViewBag.TimeCategories ?? new List<string>())),
                    datasets: [{
                        label: 'Average Time (seconds)',
                        data: @Html.Raw(Json.Serialize(ViewBag.AvgTimeSpent ?? new List<double>())),
                        backgroundColor: 'rgba(23, 162, 184, 0.7)'
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        x: {
                            beginAtZero: true
                        }
                    }
                }
            });
            
            // Initialize DataTable for user interactions
            $('#userInteractionsTable').DataTable({
                order: [[5, 'desc']], // Sort by score
                language: {
                    emptyTable: "Không có dữ liệu",
                    info: "Hiển thị _START_ đến _END_ của _TOTAL_ mục",
                    infoEmpty: "Hiển thị 0 đến 0 của 0 mục",
                    infoFiltered: "(lọc từ _MAX_ mục)",
                    lengthMenu: "Hiển thị _MENU_ mục",
                    loadingRecords: "Đang tải...",
                    processing: "Đang xử lý...",
                    search: "Tìm kiếm:",
                    zeroRecords: "Không tìm thấy kết quả phù hợp",
                    paginate: {
                        first: "Đầu",
                        last: "Cuối",
                        next: "Tiếp",
                        previous: "Trước"
                    }
                }
            });
        });
    </script>
}
