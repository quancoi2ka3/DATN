@{
    ViewData["Title"] = "Ph√¢n T√≠ch T√¨m Ki·∫øm";
    Layout = "_AdminLayout";
}

<div class="container-fluid px-4">
    <div class="d-sm-flex align-items-center justify-content-between mb-4">
        <div>
            <h1 class="h3 mb-0 text-gray-800">
                <i class="fas fa-search me-2"></i>Ph√¢n T√≠ch T√¨m Ki·∫øm
            </h1>
            <p class="mb-0 text-muted">Theo d√µi v√† ph√¢n t√≠ch h√†nh vi t√¨m ki·∫øm c·ªßa ng∆∞·ªùi d√πng t·ª´ Mixpanel</p>
        </div>
        <div class="d-none d-sm-inline-block">
            <button class="btn btn-primary me-2" onclick="refreshSearchData()">
                <i class="fas fa-sync-alt me-1"></i>L√†m M·ªõi D·ªØ Li·ªáu
            </button>
            <button class="btn btn-secondary" onclick="toggleDebugPanel()">
                <i class="fas fa-bug me-1"></i>Debug
            </button>
        </div>
    </div>

    <!-- Search Analytics Cards -->
    <div class="row mb-4">
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-primary shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-primary text-uppercase mb-1">T·ªïng S·ªë T√¨m Ki·∫øm</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @((ViewBag.SearchData as Array)?.Length ?? 0)
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-search fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-success shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-success text-uppercase mb-1">T·ª´ Kh√≥a Ph·ªï Bi·∫øn</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @{
                                    var searchData = ViewBag.SearchData as dynamic[];
                                    var topSearch = searchData?.FirstOrDefault();
                                }
                                @(topSearch?.Term ?? "N/A")
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-line fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-info shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-info text-uppercase mb-1">T·ªïng L∆∞·ª£t T√¨m</div>
                            <div class="h5 mb-0 font-weight-bold text-gray-800">
                                @{
                                    var totalSearches = 0;
                                    if (searchData != null)
                                    {
                                        foreach (var item in searchData)
                                        {
                                            totalSearches += (int)(item.Count ?? 0);
                                        }
                                    }
                                }
                                @totalSearches
                            </div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-chart-bar fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <div class="col-xl-3 col-md-6 mb-4">
            <div class="card border-left-warning shadow h-100 py-2">
                <div class="card-body">
                    <div class="row no-gutters align-items-center">
                        <div class="col mr-2">
                            <div class="text-xs font-weight-bold text-warning text-uppercase mb-1">Ngu·ªìn D·ªØ Li·ªáu</div>
                            <div class="h6 mb-0 font-weight-bold text-gray-800">
                                <i class="fas fa-chart-line me-1"></i>Mixpanel Analytics
                            </div>
                            <div class="small text-muted">30 ng√†y qua</div>
                        </div>
                        <div class="col-auto">
                            <i class="fas fa-database fa-2x text-gray-300"></i>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Search Data Table -->
    <div class="card shadow mb-4">
        <div class="card-header py-3">
            <h6 class="m-0 font-weight-bold text-primary">
                <i class="fas fa-table me-2"></i>Chi Ti·∫øt Ph√¢n T√≠ch T√¨m Ki·∫øm
            </h6>
        </div>
        <div class="card-body">
            <div class="table-responsive">
                <table class="table table-bordered" id="searchTable" width="100%" cellspacing="0">
                    <thead>
                        <tr>
                            <th>T·ª´ Kh√≥a T√¨m Ki·∫øm</th>
                            <th>S·ªë L∆∞·ª£t T√¨m</th>
                            <th>K·∫øt Qu·∫£ T√¨m Th·∫•y</th>
                            <th>T·ª∑ L·ªá Click Through</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (ViewBag.SearchData != null)
                        {
                            foreach (var item in ViewBag.SearchData)
                            {
                                <tr>
                                    <td>@item.Term</td>
                                    <td>
                                        <span class="badge badge-primary">@item.Count</span>
                                    </td>
                                    <td>@item.ResultsFound</td>
                                    <td>
                                        @{
                                            var clickThrough = (double)(item.ClickThrough ?? 0.0);
                                            var percentageClass = clickThrough > 0.5 ? "text-success" : clickThrough > 0.2 ? "text-warning" : "text-danger";
                                        }
                                        <span class="@percentageClass">
                                            @clickThrough.ToString("P1")
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" class="text-center text-muted">
                                    <i class="fas fa-info-circle me-2"></i>Kh√¥ng c√≥ d·ªØ li·ªáu t√¨m ki·∫øm
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Debug Panel -->
    <div class="card border-secondary mb-4" id="debugPanel" style="display: none;">
        <div class="card-header bg-secondary text-white">
            <h6 class="m-0">
                <i class="fas fa-bug me-2"></i>Debug Information
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6>üîß Test Actions</h6>
                    <button class="btn btn-sm btn-info me-2" onclick="testMixpanelConnection()">
                        <i class="fas fa-plug"></i> Test Mixpanel
                    </button>
                    <button class="btn btn-sm btn-success me-2" onclick="sendTestSearchEvent()">
                        <i class="fas fa-paper-plane"></i> Send Test Search
                    </button>
                    <button class="btn btn-sm btn-warning" onclick="loadSearchAnalytics()">
                        <i class="fas fa-sync"></i> Reload Data
                    </button>
                </div>
                <div class="col-md-6">
                    <h6>üìä Debug Info</h6>
                    <div id="debugInfo" style="font-family: monospace; font-size: 12px; background: #f8f9fa; padding: 10px; border-radius: 4px;">
                        Ready to debug...
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Mixpanel Integration Status -->
    <div class="card border-info mb-4">
        <div class="card-header bg-info text-white">
            <h6 class="m-0">
                <i class="fas fa-chart-line me-2"></i>T√¨nh Tr·∫°ng T√≠ch H·ª£p Mixpanel
            </h6>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-md-6">
                    <h6><i class="fas fa-check-circle text-success"></i> K·∫øt N·ªëi</h6>
                    <p class="mb-2">ƒê√£ k·∫øt n·ªëi v·ªõi Mixpanel Analytics</p>
                    <small class="text-muted">Project Token: 8e22b9a79446802234818ec75fbf40f0</small>
                </div>
                <div class="col-md-6">
                    <h6><i class="fas fa-clock text-warning"></i> D·ªØ Li·ªáu</h6>
                    <p class="mb-2">C·∫≠p nh·∫≠t l·∫ßn cu·ªëi: @DateTime.Now.ToString("HH:mm:ss dd/MM/yyyy")</p>
                    <small class="text-muted">Export API c√≥ th·ªÉ c√≥ ƒë·ªô tr·ªÖ 15-30 ph√∫t</small>
                </div>
            </div>
            <div class="mt-3">
                <div class="alert alert-info mb-0">
                    <i class="fas fa-info-circle me-2"></i>
                    <strong>L∆∞u √Ω:</strong> D·ªØ li·ªáu t√¨m ki·∫øm ƒë∆∞·ª£c thu th·∫≠p t·ª´ events "Search" tr√™n Mixpanel. 
                    N·∫øu kh√¥ng th·∫•y d·ªØ li·ªáu m·ªõi, h√£y ki·ªÉm tra 
                    <a href="https://mixpanel.com/project/8e22b9a79446802234818ec75fbf40f0/view/live" target="_blank" class="alert-link">
                        Mixpanel Live View
                    </a>
                    ƒë·ªÉ x√°c nh·∫≠n events ƒëang ƒë∆∞·ª£c g·ª≠i.
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
<script>
let dataTable;

// Initialize DataTable and load data
$(document).ready(function() {
    initializeDataTable();
    loadSearchAnalytics();
});

function initializeDataTable() {
    dataTable = $('#searchTable').DataTable({
        order: [[ 1, "desc" ]],
        pageLength: 25,
        language: {
            emptyTable: "Kh√¥ng c√≥ d·ªØ li·ªáu",
            info: "Hi·ªÉn th·ªã _START_ ƒë·∫øn _END_ c·ªßa _TOTAL_ m·ª•c",
            infoEmpty: "Hi·ªÉn th·ªã 0 ƒë·∫øn 0 c·ªßa 0 m·ª•c",
            infoFiltered: "(l·ªçc t·ª´ _MAX_ m·ª•c)",
            lengthMenu: "Hi·ªÉn th·ªã _MENU_ m·ª•c",
            loadingRecords: "ƒêang t·∫£i...",
            processing: "ƒêang x·ª≠ l√Ω...",
            search: "T√¨m ki·∫øm:",
            zeroRecords: "Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£ ph√π h·ª£p",
            paginate: {
                first: "ƒê·∫ßu",
                last: "Cu·ªëi",
                next: "Ti·∫øp",
                previous: "Tr∆∞·ªõc"
            }
        },
        columnDefs: [
            { targets: [1, 2], className: "text-center" },
            { targets: [3], className: "text-center" }
        ]
    });
}

// Load search analytics via API
async function loadSearchAnalytics() {
    try {
        console.log('üîÑ Loading search analytics data...');
        
        const response = await fetch('/Admin/AnalyticsAdmin/api/search-analytics');
        const result = await response.json();
        
        if (result.success) {
            console.log('‚úÖ Search analytics loaded:', result.stats);
            updateTable(result.data);
            updateStats(result.stats);
            showLastUpdate();
        } else {
            console.error('‚ùå Failed to load search analytics:', result.error);
            showError(result.error || 'Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu');
        }
    } catch (error) {
        console.error('‚ùå Error loading search analytics:', error);
        showError('L·ªói k·∫øt n·ªëi API: ' + error.message);
    }
}

function updateTable(searchData) {
    // Clear existing data
    dataTable.clear();
    
    // Add new data
    searchData.forEach(item => {
        const clickThroughClass = item.ClickThrough > 0.5 ? 'text-success' : 
                                 item.ClickThrough > 0.2 ? 'text-warning' : 'text-danger';
        
        dataTable.row.add([
            item.Term,
            `<span class="badge badge-primary">${item.Count}</span>`,
            item.ResultsFound,
            `<span class="${clickThroughClass}">${(item.ClickThrough * 100).toFixed(1)}%</span>`
        ]);
    });
    
    // Redraw table
    dataTable.draw();
}

function updateStats(stats) {
    // Update the stats cards if they exist
    const totalSearchesElement = document.querySelector('.h5.mb-0.font-weight-bold.text-gray-800');
    if (totalSearchesElement && stats.unique_terms) {
        // This is a simple update, you might want to be more specific with selectors
        console.log('üìä Stats updated:', stats);
    }
}

function showLastUpdate() {
    const now = new Date();
    const timeString = now.toLocaleTimeString('vi-VN');
    console.log(`‚è∞ Data updated at: ${timeString}`);
    
    // You can add a visual indicator here
    const statusElement = document.querySelector('.card-header');
    if (statusElement) {
        statusElement.style.borderLeft = '4px solid #28a745';
        setTimeout(() => {
            statusElement.style.borderLeft = '';
        }, 2000);
    }
}

function showError(message) {
    console.error('‚ùå Search Analytics Error:', message);
    
    // Clear table and show error
    dataTable.clear();
    dataTable.row.add([
        `‚ö†Ô∏è ${message}`,
        '<span class="badge badge-warning">0</span>',
        '0',
        '<span class="text-muted">0%</span>'
    ]);
    dataTable.draw();
}

// Refresh search data
function refreshSearchData() {
    loadSearchAnalytics();
}

// Auto-refresh every 2 minutes
setInterval(function() {
    console.log('üîÑ Auto-refreshing search analytics...');
    loadSearchAnalytics();
}, 2 * 60 * 1000);

// Debug functions
function toggleDebugPanel() {
    const panel = document.getElementById('debugPanel');
    panel.style.display = panel.style.display === 'none' ? 'block' : 'none';
}

function updateDebugInfo(message) {
    const debugInfo = document.getElementById('debugInfo');
    const timestamp = new Date().toLocaleTimeString();
    debugInfo.innerHTML += `[${timestamp}] ${message}<br>`;
    debugInfo.scrollTop = debugInfo.scrollHeight;
}

async function testMixpanelConnection() {
    updateDebugInfo('üîå Testing Mixpanel connection...');
    try {
        const response = await fetch('/api/mixpaneldebug/test-search-data');
        const result = await response.json();
        
        if (result.success) {
            updateDebugInfo(`‚úÖ Mixpanel OK - ${result.total_events} events, ${result.unique_terms} terms`);
        } else {
            updateDebugInfo(`‚ùå Mixpanel Error: ${result.error}`);
        }
    } catch (error) {
        updateDebugInfo(`‚ùå Connection Error: ${error.message}`);
    }
}

async function sendTestSearchEvent() {
    updateDebugInfo('üì§ Sending test search event...');
    const testSearchTerm = `test-search-${Date.now()}`;
    
    try {
        const response = await fetch('/api/mixpanel/track', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                event: 'Search',
                properties: {
                    distinct_id: `test-user-${Date.now()}`,
                    search_term: testSearchTerm,
                    results_count: Math.floor(Math.random() * 10) + 1,
                    timestamp: Math.floor(Date.now() / 1000),
                    user_agent: 'SearchAnalytics-Debug/1.0'
                }
            })
        });
        
        if (response.ok) {
            updateDebugInfo(`‚úÖ Test search event sent: "${testSearchTerm}"`);
            // Reload data after a short delay
            setTimeout(() => {
                updateDebugInfo('üîÑ Reloading data to check for new event...');
                loadSearchAnalytics();
            }, 2000);
        } else {
            updateDebugInfo(`‚ùå Failed to send test event: ${response.status}`);
        }
    } catch (error) {
        updateDebugInfo(`‚ùå Send Error: ${error.message}`);
    }
}
</script>
}
