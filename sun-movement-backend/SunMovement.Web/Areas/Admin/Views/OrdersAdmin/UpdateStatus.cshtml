@model SunMovement.Core.Models.Order
@using SunMovement.Core.Models
@{
    ViewData["Title"] = "Update Order Status";
    Layout = "_AdminLayout";
}

<div class="container-fluid px-4">
    <h1 class="mt-4">Update Order Status</h1>
    <ol class="breadcrumb mb-4">
        <li class="breadcrumb-item"><a href="/admin">Dashboard</a></li>
        <li class="breadcrumb-item"><a href="/admin/orders">Orders</a></li>
        <li class="breadcrumb-item"><a href="/admin/orders/details/@Model.Id">Order #@Model.Id</a></li>
        <li class="breadcrumb-item active">Update Status</li>
    </ol>
    
    <div class="row">
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-exchange-alt me-1"></i> Change Order Status
                </div>
                <div class="card-body">
                    <div class="mb-4">
                        <h5>Current Status</h5>
                        <div class="p-3 bg-light rounded">
                            @switch (Model.Status)
                            {
                                case OrderStatus.Pending:
                                    <span class="badge bg-warning text-dark">Pending</span>
                                    break;
                                case OrderStatus.Processing:
                                    <span class="badge bg-info">Processing</span>
                                    break;
                                case OrderStatus.Shipped:
                                    <span class="badge bg-primary">Shipped</span>
                                    break;
                                case OrderStatus.Delivered:
                                    <span class="badge bg-success">Delivered</span>
                                    break;
                                case OrderStatus.Cancelled:
                                    <span class="badge bg-danger">Cancelled</span>
                                    break;
                                default:
                                    <span class="badge bg-secondary">@Model.Status</span>
                                    break;
                            }
                        </div>
                    </div>
                    
                    <form asp-action="UpdateStatus" asp-route-id="@Model.Id" method="post">
                        <div class="form-group mb-3">
                            <label for="status" class="form-label">New Status</label>
                            <select name="status" id="status" class="form-select" asp-items="Html.GetEnumSelectList<OrderStatus>()">
                                <option value="">-- Select Status --</option>
                            </select>
                        </div>
                        
                        <div class="alert alert-warning" id="statusWarning" style="display: none;">
                            <i class="fas fa-exclamation-triangle me-2"></i>
                            <span id="warningMessage"></span>
                        </div>
                        
                        <div class="mt-4">
                            <button type="submit" class="btn btn-primary">Update Status</button>
                            <a href="/admin/orders/details/@Model.Id" class="btn btn-secondary">Cancel</a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
        
        <div class="col-xl-6">
            <div class="card mb-4">
                <div class="card-header">
                    <i class="fas fa-info-circle me-1"></i> Order Information
                </div>
                <div class="card-body">
                    <dl class="row">
                        <dt class="col-sm-4">Order #</dt>
                        <dd class="col-sm-8">@Model.Id</dd>
                        
                        <dt class="col-sm-4">Customer</dt>
                        <dd class="col-sm-8">@Model.CustomerName</dd>
                        
                        <dt class="col-sm-4">Date</dt>
                        <dd class="col-sm-8">@Model.CreatedAt.ToString("MM/dd/yyyy HH:mm")</dd>
                        
                        <dt class="col-sm-4">Total</dt>
                        <dd class="col-sm-8">$@Model.TotalAmount.ToString("F2")</dd>
                        
                        <dt class="col-sm-4">Items</dt>
                        <dd class="col-sm-8">@Model.OrderItems.Count</dd>
                        
                        <dt class="col-sm-4">Payment</dt>
                        <dd class="col-sm-8">
                            @if (Model.IsPaid)
                            {
                                <span class="badge bg-success">Paid</span>
                            }
                            else
                            {
                                <span class="badge bg-danger">Unpaid</span>
                            }
                            <span class="ms-2">@Model.PaymentMethod</span>
                        </dd>
                    </dl>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            $('#status').change(function() {
                var selectedStatus = $(this).val();
                var warning = $('#statusWarning');
                var message = $('#warningMessage');
                
                // Reset warning
                warning.hide();
                
                // Show warnings based on status
                if (selectedStatus === '@OrderStatus.Cancelled.ToString()') {
                    message.text('Cancelling an order cannot be undone. This will release any held inventory.');
                    warning.show();
                }
                else if (selectedStatus === '@OrderStatus.Shipped.ToString()' && '@Model.IsPaid.ToString().ToLower()' === 'false') {
                    message.text('This order has not been marked as paid. Are you sure you want to mark it as shipped?');
                    warning.show();
                }
                else if (selectedStatus === '@OrderStatus.Delivered.ToString()' && '@(!string.IsNullOrEmpty(Model.TrackingNumber)).ToString().ToLower()' === 'false') {
                    message.text('This order does not have a tracking number. Consider adding one before marking as delivered.');
                    warning.show();
                }
            });
        });
    </script>
}
