"""
Fix v√† retrain model Rasa
"""
import os
import sys
import yaml
import shutil
import subprocess
from pathlib import Path

def print_section(title):
    """In ti√™u ƒë·ªÅ ph·∫ßn"""
    print(f"\n{'='*60}")
    print(f"{title}")
    print(f"{'='*60}")

def backup_file(file_path):
    """T·∫°o b·∫£n sao l∆∞u c·ªßa file"""
    if os.path.exists(file_path):
        backup_path = f"{file_path}.bak"
        shutil.copy2(file_path, backup_path)
        print(f"ƒê√£ sao l∆∞u file {file_path} -> {backup_path}")
        return True
    return False

def fix_domain_file(chatbot_dir):
    """S·ª≠a file domain.yml"""
    print_section("S·ª¨A FILE DOMAIN.YML")
    
    domain_file = os.path.join(chatbot_dir, "domain.yml")
    if not os.path.exists(domain_file):
        print(f"Kh√¥ng t√¨m th·∫•y file domain.yml trong {chatbot_dir}")
        return False
    
    try:
        # T·∫°o b·∫£n sao l∆∞u
        backup_file(domain_file)
        
        # ƒê·ªçc n·ªôi dung file
        with open(domain_file, 'r', encoding='utf-8') as f:
            domain_data = yaml.safe_load(f)
        
        # S·ª≠a ph·∫£n h·ªìi thanh to√°n
        modified = False
        if 'responses' in domain_data:
            for resp_name in domain_data['responses']:
                if 'payment' in resp_name.lower() or 'thanh_to√°n' in resp_name.lower() or 'thanh_toan' in resp_name.lower():
                    # ƒê√°nh d·∫•u ph·∫£n h·ªìi ƒë·ªÉ d·ªÖ nh·∫≠n bi·∫øt
                    domain_data['responses'][resp_name] = [
                        {
                            'text': '[FIXED] üí≥ Ph∆∞∆°ng th·ª©c thanh to√°n:\n‚Ä¢ Ti·ªÅn m·∫∑t t·∫°i c·ª≠a h√†ng\n‚Ä¢ Chuy·ªÉn kho·∫£n ng√¢n h√†ng\n‚Ä¢ Th·∫ª t√≠n d·ª•ng/ghi n·ª£\n‚Ä¢ V√≠ ƒëi·ªán t·ª≠ (MoMo, ZaloPay)'
                        }
                    ]
                    print(f"ƒê√£ s·ª≠a ph·∫£n h·ªìi: {resp_name}")
                    modified = True
        
        # Th√™m utter_default v√† utter_fallback r√µ r√†ng
        if 'responses' not in domain_data:
            domain_data['responses'] = {}
            
        # Th√™m ph·∫£n h·ªìi fallback r√µ r√†ng
        domain_data['responses']['utter_default'] = [
            {
                'text': '[FIXED] Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ:\n‚Ä¢ S·∫£n ph·∫©m v√† d·ªãch v·ª•\n‚Ä¢ Gi√° c·∫£ v√† khuy·∫øn m·∫°i\n‚Ä¢ L·ªãch t·∫≠p v√† ƒëƒÉng k√Ω\n‚Ä¢ Li√™n h·ªá v√† h·ªó tr·ª£'
            }
        ]
        domain_data['responses']['utter_fallback'] = [
            {
                'text': '[FIXED] Xin l·ªói, t√¥i kh√¥ng hi·ªÉu √Ω c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ tr·ª£ gi√∫p v·ªÅ:\n‚Ä¢ S·∫£n ph·∫©m v√† d·ªãch v·ª•\n‚Ä¢ Gi√° c·∫£ v√† khuy·∫øn m·∫°i\n‚Ä¢ L·ªãch t·∫≠p v√† ƒëƒÉng k√Ω\n‚Ä¢ Li√™n h·ªá v√† h·ªó tr·ª£'
            }
        ]
        print("ƒê√£ th√™m utter_default v√† utter_fallback r√µ r√†ng")
        modified = True
            
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(domain_file, 'w', encoding='utf-8') as f:
                yaml.dump(domain_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print(f"ƒê√£ l∆∞u thay ƒë·ªïi v√†o {domain_file}")
            return True
        else:
            print("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán")
            return False
            
    except Exception as e:
        print(f"L·ªói khi s·ª≠a domain.yml: {str(e)}")
        return False

def fix_rules_file(chatbot_dir):
    """S·ª≠a file rules.yml"""
    print_section("S·ª¨A FILE RULES.YML")
    
    rules_file = os.path.join(chatbot_dir, "data", "rules.yml")
    if not os.path.exists(rules_file):
        print(f"Kh√¥ng t√¨m th·∫•y file rules.yml trong {os.path.join(chatbot_dir, 'data')}")
        return False
    
    try:
        # T·∫°o b·∫£n sao l∆∞u
        backup_file(rules_file)
        
        # ƒê·ªçc n·ªôi dung file
        with open(rules_file, 'r', encoding='utf-8') as f:
            rules_data = yaml.safe_load(f)
        
        # Ki·ªÉm tra v√† s·ª≠a c√°c rule
        modified = False
        problematic_rules = []
        
        if 'rules' in rules_data:
            # T√¨m c√°c rule c√≥ v·∫•n ƒë·ªÅ
            for i, rule in enumerate(rules_data['rules']):
                if 'steps' in rule:
                    for step in rule['steps']:
                        if 'action' in step and ('payment' in step['action'].lower() or 'thanh_to√°n' in step['action'].lower()):
                            # ƒê√°nh d·∫•u rule c√≥ v·∫•n ƒë·ªÅ
                            problematic_rules.append(i)
                            break
            
            # S·ª≠a ho·∫∑c x√≥a c√°c rule c√≥ v·∫•n ƒë·ªÅ
            if problematic_rules:
                print(f"T√¨m th·∫•y {len(problematic_rules)} rule c√≥ v·∫•n ƒë·ªÅ")
                
                # T√πy ch·ªçn 1: X√≥a c√°c rule c√≥ v·∫•n ƒë·ªÅ
                # for index in sorted(problematic_rules, reverse=True):
                #     del rules_data['rules'][index]
                #     print(f"ƒê√£ x√≥a rule c√≥ v·∫•n ƒë·ªÅ ·ªü v·ªã tr√≠ {index}")
                
                # T√πy ch·ªçn 2: S·ª≠a c√°c rule ƒë·ªÉ ch√∫ng ch·ªâ tr·∫£ v·ªÅ action khi th·ª±c s·ª± c·∫ßn
                for index in problematic_rules:
                    rule = rules_data['rules'][index]
                    rule_name = rule.get('rule', f"Rule #{index}")
                    print(f"ƒêang s·ª≠a {rule_name}...")
                    
                    # L√†m cho rule ch·∫∑t ch·∫Ω h∆°n
                    if 'steps' in rule:
                        for step in rule['steps']:
                            if 'action' in step and ('payment' in step['action'].lower() or 'thanh_to√°n' in step['action'].lower()):
                                # ƒê·∫£m b·∫£o rule ch·ªâ kh·ªõp v·ªõi intent thanh to√°n c·ª• th·ªÉ
                                if not any('intent' in s and ('payment' in s.get('intent', '').lower() or 'thanh_to√°n' in s.get('intent', '').lower()) for s in rule['steps']):
                                    print(f"  Th√™m ƒëi·ªÅu ki·ªán intent payment_inquiry v√†o rule")
                                    rule['steps'].insert(0, {'intent': 'payment_inquiry'})
                
                modified = True
            
            # Th√™m rule fallback r√µ r√†ng
            has_fallback_rule = any('fallback' in rule.get('rule', '').lower() for rule in rules_data['rules'])
            
            if not has_fallback_rule:
                print("Th√™m rule fallback r√µ r√†ng")
                fallback_rule = {
                    'rule': 'Rule fallback',
                    'steps': [
                        {'intent': 'nlu_fallback'},
                        {'action': 'utter_fallback'}
                    ]
                }
                rules_data['rules'].append(fallback_rule)
                modified = True
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(rules_file, 'w', encoding='utf-8') as f:
                yaml.dump(rules_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print(f"ƒê√£ l∆∞u thay ƒë·ªïi v√†o {rules_file}")
            return True
        else:
            print("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán")
            return False
            
    except Exception as e:
        print(f"L·ªói khi s·ª≠a rules.yml: {str(e)}")
        return False

def fix_config_file(chatbot_dir):
    """S·ª≠a file config.yml"""
    print_section("S·ª¨A FILE CONFIG.YML")
    
    config_file = os.path.join(chatbot_dir, "config.yml")
    if not os.path.exists(config_file):
        print(f"Kh√¥ng t√¨m th·∫•y file config.yml trong {chatbot_dir}")
        return False
    
    try:
        # T·∫°o b·∫£n sao l∆∞u
        backup_file(config_file)
        
        # ƒê·ªçc n·ªôi dung file
        with open(config_file, 'r', encoding='utf-8') as f:
            config_data = yaml.safe_load(f)
        
        # Ki·ªÉm tra v√† s·ª≠a pipeline
        modified = False
        has_fallback_classifier = False
        
        if 'pipeline' in config_data:
            for component in config_data['pipeline']:
                if isinstance(component, dict) and 'name' in component and 'FallbackClassifier' in component['name']:
                    has_fallback_classifier = True
                    # ƒêi·ªÅu ch·ªânh threshold c·ªßa FallbackClassifier
                    if 'threshold' in component and component['threshold'] < 0.7:
                        old_threshold = component['threshold']
                        component['threshold'] = 0.7
                        print(f"ƒê√£ tƒÉng threshold c·ªßa FallbackClassifier t·ª´ {old_threshold} l√™n 0.7")
                        modified = True
            
            # Th√™m FallbackClassifier n·∫øu ch∆∞a c√≥
            if not has_fallback_classifier:
                print("Th√™m FallbackClassifier v√†o pipeline")
                config_data['pipeline'].append({
                    'name': 'FallbackClassifier',
                    'threshold': 0.7,
                    'ambiguity_threshold': 0.1
                })
                modified = True
        
        # Ki·ªÉm tra v√† s·ª≠a policies
        has_rule_policy = False
        if 'policies' in config_data:
            for policy in config_data['policies']:
                if isinstance(policy, dict) and 'name' in policy and 'RulePolicy' in policy['name']:
                    has_rule_policy = True
            
            # Th√™m RulePolicy n·∫øu ch∆∞a c√≥
            if not has_rule_policy:
                print("Th√™m RulePolicy v√†o policies")
                config_data['policies'].append({
                    'name': 'RulePolicy',
                    'core_fallback_threshold': 0.3,
                    'core_fallback_action_name': 'utter_fallback',
                    'enable_fallback_prediction': True
                })
                modified = True
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print(f"ƒê√£ l∆∞u thay ƒë·ªïi v√†o {config_file}")
            return True
        else:
            print("Kh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán")
            return False
            
    except Exception as e:
        print(f"L·ªói khi s·ª≠a config.yml: {str(e)}")
        return False

def clean_models_folder(chatbot_dir):
    """X√≥a c√°c model c≈©"""
    print_section("X√ìA C√ÅC MODEL C≈®")
    
    models_dir = os.path.join(chatbot_dir, "models")
    if not os.path.exists(models_dir):
        print(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c models trong {chatbot_dir}")
        os.makedirs(models_dir)
        print(f"ƒê√£ t·∫°o th∆∞ m·ª•c models m·ªõi")
        return True
    
    try:
        # Li·ªát k√™ c√°c file model
        models = [f for f in os.listdir(models_dir) if os.path.isfile(os.path.join(models_dir, f)) and f.endswith('.tar.gz')]
        
        if models:
            # T·∫°o th∆∞ m·ª•c backup
            backup_dir = os.path.join(chatbot_dir, "models_backup")
            os.makedirs(backup_dir, exist_ok=True)
            
            # Di chuy·ªÉn c√°c model c≈© v√†o th∆∞ m·ª•c backup
            for model in models:
                src = os.path.join(models_dir, model)
                dst = os.path.join(backup_dir, model)
                shutil.move(src, dst)
                print(f"ƒê√£ di chuy·ªÉn {model} -> {dst}")
            
            print(f"ƒê√£ di chuy·ªÉn {len(models)} model c≈© v√†o th∆∞ m·ª•c backup")
            return True
        else:
            print("Kh√¥ng t√¨m th·∫•y model n√†o ƒë·ªÉ x√≥a")
            return True
            
    except Exception as e:
        print(f"L·ªói khi x√≥a models c≈©: {str(e)}")
        return False

def train_new_model(chatbot_dir):
    """Train model m·ªõi"""
    print_section("TRAIN MODEL M·ªöI")
    
    try:
        # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c chatbot
        current_dir = os.getcwd()
        os.chdir(chatbot_dir)
        
        print("ƒêang train model m·ªõi... (c√≥ th·ªÉ m·∫•t v√†i ph√∫t)")
        
        # Ch·∫°y l·ªánh train
        result = subprocess.run(
            ["rasa", "train", "--force"],
            capture_output=True,
            text=True
        )
        
        # Kh√¥i ph·ª•c th∆∞ m·ª•c l√†m vi·ªác
        os.chdir(current_dir)
        
        # Ki·ªÉm tra k·∫øt qu·∫£
        if result.returncode == 0:
            print("Train model th√†nh c√¥ng!")
            print(result.stdout)
            return True
        else:
            print("L·ªói khi train model:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"L·ªói khi train model: {str(e)}")
        return False

def restart_rasa_server(chatbot_dir):
    """Kh·ªüi ƒë·ªông l·∫°i Rasa server"""
    print_section("KH·ªûI ƒê·ªòNG L·∫†I RASA SERVER")
    
    try:
        # Ki·ªÉm tra n·∫øu Rasa server ƒëang ch·∫°y
        try:
            import requests
            requests.get("http://localhost:5005/status", timeout=2)
            
            print("Rasa server ƒëang ch·∫°y, c·∫ßn d·ª´ng l·∫°i tr∆∞·ªõc...")
            
            # T√¨m v√† d·ª´ng process Rasa
            if os.name == 'nt':  # Windows
                subprocess.run(["taskkill", "/f", "/im", "rasa.exe"], capture_output=True)
                subprocess.run(["taskkill", "/f", "/fi", "WINDOWTITLE eq *rasa*"], capture_output=True)
            else:  # Linux/Mac
                subprocess.run(["pkill", "-f", "rasa run"], capture_output=True)
                
            print("ƒê√£ d·ª´ng Rasa server")
            
        except:
            print("Rasa server kh√¥ng ch·∫°y, ti·∫øp t·ª•c...")
        
        print("ƒêang kh·ªüi ƒë·ªông Rasa server v·ªõi model m·ªõi...")
        
        # Ch·∫°y Rasa server trong m·ªôt terminal ri√™ng bi·ªát
        if os.name == 'nt':  # Windows
            subprocess.Popen(
                ["start", "cmd", "/k", "cd", "/d", chatbot_dir, "&&", "rasa", "run", "--enable-api", "--cors", "*"],
                shell=True
            )
        else:  # Linux/Mac
            subprocess.Popen(
                ["gnome-terminal", "--", "bash", "-c", f"cd {chatbot_dir} && rasa run --enable-api --cors '*'; read"],
                start_new_session=True
            )
            
        print("ƒê√£ kh·ªüi ƒë·ªông Rasa server")
        print("Vui l√≤ng ƒë·ª£i v√†i gi√¢y ƒë·ªÉ server kh·ªüi ƒë·ªông ho√†n t·∫•t...")
        
        return True
            
    except Exception as e:
        print(f"L·ªói khi kh·ªüi ƒë·ªông l·∫°i Rasa server: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a ch·ªØa"""
    print("\n===== KH·∫ÆC PH·ª§C V√Ä RETRAIN MODEL RASA =====\n")
    
    # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n th∆∞ m·ª•c chatbot
    chatbot_dir = os.path.join("d:", "DATN", "DATN", "sun-movement-chatbot")
    if not os.path.exists(chatbot_dir):
        print(f"Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c chatbot t·∫°i {chatbot_dir}")
        sys.exit(1)
        
    print(f"Th∆∞ m·ª•c chatbot: {chatbot_dir}")
    
    # Th·ª±c hi·ªán c√°c b∆∞·ªõc s·ª≠a ch·ªØa
    fixed_domain = fix_domain_file(chatbot_dir)
    fixed_rules = fix_rules_file(chatbot_dir)
    fixed_config = fix_config_file(chatbot_dir)
    cleaned_models = clean_models_folder(chatbot_dir)
    
    # Train model m·ªõi n·∫øu ƒë√£ s·ª≠a √≠t nh·∫•t m·ªôt file
    if fixed_domain or fixed_rules or fixed_config or cleaned_models:
        print("\nƒê√£ s·ª≠a xong c·∫•u h√¨nh, b·∫Øt ƒë·∫ßu train model m·ªõi...")
        trained = train_new_model(chatbot_dir)
        
        if trained:
            restart_rasa_server(chatbot_dir)
            print("\nƒê√£ ho√†n t·∫•t qu√° tr√¨nh kh·∫Øc ph·ª•c v√† retrain model!")
            print("Vui l√≤ng ƒë·ª£i Rasa server kh·ªüi ƒë·ªông ho√†n t·∫•t (kho·∫£ng 30 gi√¢y)")
            print("Sau ƒë√≥ ch·∫°y script ki·ªÉm tra ƒë·ªÉ x√°c nh·∫≠n v·∫•n ƒë·ªÅ ƒë√£ ƒë∆∞·ª£c kh·∫Øc ph·ª•c.")
        else:
            print("\nTrain model th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra l·ªói v√† th·ª≠ l·∫°i.")
    else:
        print("\nKh√¥ng c√≥ thay ƒë·ªïi n√†o ƒë∆∞·ª£c th·ª±c hi·ªán, kh√¥ng c·∫ßn train l·∫°i model.")

if __name__ == "__main__":
    main()
