"""
S·ª≠a l·ªói file c·∫•u h√¨nh Rasa tr∆∞·ªõc khi train l·∫°i model
"""
import os
import sys
import yaml
import shutil
from pathlib import Path

def print_header(message):
    """In ti√™u ƒë·ªÅ v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp"""
    print("\n" + "=" * 60)
    print(message)
    print("=" * 60)

def backup_file(file_path):
    """T·∫°o b·∫£n sao l∆∞u cho file"""
    if os.path.exists(file_path):
        backup_path = file_path + ".bak"
        shutil.copy2(file_path, backup_path)
        print(f"‚úÖ ƒê√£ sao l∆∞u file: {file_path} -> {backup_path}")
        return True
    else:
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file: {file_path}")
        return False

def fix_domain_file(chatbot_dir):
    """S·ª≠a file domain.yml ƒë·ªÉ tr√°nh ph·∫£n h·ªìi thanh to√°n m·∫∑c ƒë·ªãnh"""
    domain_file = os.path.join(chatbot_dir, "domain.yml")
    if not os.path.exists(domain_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file domain.yml t·∫°i {domain_file}")
        return False
    
    print_header("ƒêANG S·ª¨A FILE DOMAIN.YML")
    
    # T·∫°o b·∫£n sao l∆∞u
    backup_file(domain_file)
    
    try:
        # ƒê·ªçc file domain.yml
        with open(domain_file, 'r', encoding='utf-8') as f:
            domain_data = yaml.safe_load(f)
        
        # Ki·ªÉm tra v√† s·ª≠a c√°c ph·∫£n h·ªìi
        if 'responses' in domain_data:
            # ƒê√°nh d·∫•u c√°c ph·∫£n h·ªìi payment ƒë·ªÉ debug
            for key in domain_data['responses']:
                if 'payment' in key.lower() or 'thanh_toan' in key.lower():
                    print(f"üîç T√¨m th·∫•y ph·∫£n h·ªìi thanh to√°n: {key}")
                    for i, response in enumerate(domain_data['responses'][key]):
                        if 'text' in response:
                            # ƒê√°nh d·∫•u ph·∫£n h·ªìi ƒë·ªÉ d·ªÖ theo d√µi
                            original_text = response['text']
                            domain_data['responses'][key][i]['text'] = f"[FIXED PAYMENT] {original_text}"
                            print(f"‚úÖ ƒê√£ s·ª≠a ph·∫£n h·ªìi thanh to√°n")
            
            # ƒê·∫£m b·∫£o c√≥ ph·∫£n h·ªìi fallback t·ªët
            if 'utter_fallback' not in domain_data['responses']:
                domain_data['responses']['utter_fallback'] = [
                    {'text': "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu √Ω c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi:\n- Th√¥ng tin v·ªÅ s·∫£n ph·∫©m\n- D·ªãch v·ª• c·ªßa Sun Movement\n- Gi√° c·∫£ v√† khuy·∫øn m√£i\n- Li√™n h·ªá v√† h·ªó tr·ª£"}
                ]
                print("‚úÖ ƒê√£ th√™m ph·∫£n h·ªìi utter_fallback")
            
            # ƒê·∫£m b·∫£o c√≥ ph·∫£n h·ªìi default t·ªët
            if 'utter_default' not in domain_data['responses']:
                domain_data['responses']['utter_default'] = [
                    {'text': "Xin l·ªói, t√¥i kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n v·ªõi c√°c ch·ªß ƒë·ªÅ v·ªÅ Sun Movement."}
                ]
                print("‚úÖ ƒê√£ th√™m ph·∫£n h·ªìi utter_default")
        
        # Ghi l·∫°i file
        with open(domain_file, 'w', encoding='utf-8') as f:
            yaml.dump(domain_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            
        print("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi v√†o domain.yml")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi s·ª≠a domain.yml: {str(e)}")
        return False

def fix_config_file(chatbot_dir):
    """S·ª≠a file config.yml ƒë·ªÉ c·∫£i thi·ªán fallback policy"""
    config_file = os.path.join(chatbot_dir, "config.yml")
    if not os.path.exists(config_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file config.yml t·∫°i {config_file}")
        return False
    
    print_header("ƒêANG S·ª¨A FILE CONFIG.YML")
    
    # T·∫°o b·∫£n sao l∆∞u
    backup_file(config_file)
    
    try:
        # ƒê·ªçc file config.yml
        with open(config_file, 'r', encoding='utf-8') as f:
            config_data = yaml.safe_load(f)
        
        modified = False
        
        # Ki·ªÉm tra v√† s·ª≠a pipeline
        if 'pipeline' in config_data:
            # Ki·ªÉm tra FallbackClassifier
            has_fallback = False
            for i, component in enumerate(config_data['pipeline']):
                if isinstance(component, dict) and 'name' in component and 'FallbackClassifier' in component['name']:
                    has_fallback = True
                    # ƒêi·ªÅu ch·ªânh ng∆∞·ª°ng confidence
                    if 'threshold' in component and component['threshold'] < 0.7:
                        old_threshold = component['threshold']
                        config_data['pipeline'][i]['threshold'] = 0.7
                        print(f"‚úÖ ƒê√£ ƒëi·ªÅu ch·ªânh threshold c·ªßa FallbackClassifier t·ª´ {old_threshold} th√†nh 0.7")
                        modified = True
            
            # Th√™m FallbackClassifier n·∫øu ch∆∞a c√≥
            if not has_fallback:
                config_data['pipeline'].append({
                    'name': 'FallbackClassifier',
                    'threshold': 0.7,
                    'ambiguity_threshold': 0.1
                })
                print("‚úÖ ƒê√£ th√™m FallbackClassifier v√†o pipeline")
                modified = True
        
        # Ki·ªÉm tra v√† s·ª≠a policies
        if 'policies' in config_data:
            # Ki·ªÉm tra RulePolicy
            has_rule_policy = False
            for i, policy in enumerate(config_data['policies']):
                if isinstance(policy, dict) and 'name' in policy and 'RulePolicy' in policy['name']:
                    has_rule_policy = True
                    # ƒê·∫£m b·∫£o c√≥ fallback action
                    if 'core_fallback_action_name' not in policy:
                        config_data['policies'][i]['core_fallback_action_name'] = 'utter_fallback'
                        config_data['policies'][i]['core_fallback_threshold'] = 0.3
                        config_data['policies'][i]['enable_fallback_prediction'] = True
                        print("‚úÖ ƒê√£ c·∫•u h√¨nh RulePolicy v·ªõi fallback")
                        modified = True
            
            # Th√™m RulePolicy n·∫øu ch∆∞a c√≥
            if not has_rule_policy:
                config_data['policies'].append({
                    'name': 'RulePolicy',
                    'core_fallback_threshold': 0.3,
                    'core_fallback_action_name': 'utter_fallback',
                    'enable_fallback_prediction': True
                })
                print("‚úÖ ƒê√£ th√™m RulePolicy v·ªõi fallback configuration")
                modified = True
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(config_file, 'w', encoding='utf-8') as f:
                yaml.dump(config_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi v√†o config.yml")
        else:
            print("‚ÑπÔ∏è Kh√¥ng c·∫ßn thay ƒë·ªïi config.yml")
            
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi s·ª≠a config.yml: {str(e)}")
        return False

def fix_rules_file(chatbot_dir):
    """S·ª≠a file rules.yml ƒë·ªÉ tr√°nh lu√¥n tr·∫£ v·ªÅ th√¥ng tin thanh to√°n"""
    rules_file = os.path.join(chatbot_dir, "data", "rules.yml")
    if not os.path.exists(rules_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file rules.yml t·∫°i {rules_file}")
        return False
    
    print_header("ƒêANG S·ª¨A FILE RULES.YML")
    
    # T·∫°o b·∫£n sao l∆∞u
    backup_file(rules_file)
    
    try:
        # ƒê·ªçc file rules.yml
        with open(rules_file, 'r', encoding='utf-8') as f:
            rules_data = yaml.safe_load(f)
        
        modified = False
        
        # Ki·ªÉm tra v√† s·ª≠a rules
        if 'rules' in rules_data:
            problematic_rules = []
            
            # T√¨m c√°c rule c√≥ v·∫•n ƒë·ªÅ (payment action kh√¥ng c√≥ payment intent)
            for i, rule in enumerate(rules_data['rules']):
                if 'steps' in rule:
                    has_payment_action = False
                    has_payment_intent = False
                    
                    for step in rule['steps']:
                        if 'action' in step and ('payment' in step['action'].lower() or 'thanh_toan' in step['action'].lower()):
                            has_payment_action = True
                        if 'intent' in step and ('payment' in step['intent'].lower() or 'thanh_toan' in step['intent'].lower()):
                            has_payment_intent = True
                    
                    # N·∫øu c√≥ action payment nh∆∞ng kh√¥ng c√≥ intent payment, ƒë√°nh d·∫•u l√† c√≥ v·∫•n ƒë·ªÅ
                    if has_payment_action and not has_payment_intent:
                        problematic_rules.append(i)
                        print(f"üîç T√¨m th·∫•y rule c√≥ v·∫•n ƒë·ªÅ: {rule.get('rule', f'Rule #{i}')}")
            
            # S·ª≠a ho·∫∑c x√≥a c√°c rule c√≥ v·∫•n ƒë·ªÅ
            for index in problematic_rules:
                rule_name = rules_data['rules'][index].get('rule', f'Rule #{index}')
                
                # Th√™m ƒëi·ªÅu ki·ªán intent payment n·∫øu ch∆∞a c√≥
                if 'steps' in rules_data['rules'][index]:
                    rules_data['rules'][index]['steps'].insert(0, {'intent': 'payment_inquiry'})
                    print(f"‚úÖ ƒê√£ th√™m intent payment_inquiry v√†o {rule_name}")
                    modified = True
            
            # ƒê·∫£m b·∫£o c√≥ rule fallback
            has_fallback_rule = False
            for rule in rules_data['rules']:
                if 'rule' in rule and 'fallback' in rule['rule'].lower():
                    has_fallback_rule = True
                    break
            
            if not has_fallback_rule:
                rules_data['rules'].append({
                    'rule': 'Fallback Rule',
                    'steps': [
                        {'intent': 'nlu_fallback'},
                        {'action': 'utter_fallback'}
                    ]
                })
                print("‚úÖ ƒê√£ th√™m fallback rule")
                modified = True
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(rules_file, 'w', encoding='utf-8') as f:
                yaml.dump(rules_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi v√†o rules.yml")
        else:
            print("‚ÑπÔ∏è Kh√¥ng c·∫ßn thay ƒë·ªïi rules.yml")
            
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi s·ª≠a rules.yml: {str(e)}")
        return False

def fix_nlu_file(chatbot_dir):
    """Ki·ªÉm tra v√† s·ª≠a file nlu.yml n·∫øu c·∫ßn thi·∫øt"""
    nlu_file = os.path.join(chatbot_dir, "data", "nlu.yml")
    if not os.path.exists(nlu_file):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y file nlu.yml t·∫°i {nlu_file}")
        return False
    
    print_header("ƒêANG KI·ªÇM TRA FILE NLU.YML")
    
    # T·∫°o b·∫£n sao l∆∞u
    backup_file(nlu_file)
    
    try:
        # ƒê·ªçc file nlu.yml
        with open(nlu_file, 'r', encoding='utf-8') as f:
            nlu_data = yaml.safe_load(f)
        
        modified = False
        
        # Ki·ªÉm tra v√† s·ª≠a NLU
        if 'nlu' in nlu_data:
            # Ki·ªÉm tra xem c√≥ intent payment_inquiry ch∆∞a
            has_payment_intent = False
            for item in nlu_data['nlu']:
                if 'intent' in item and ('payment_inquiry' == item['intent'] or 'payment' in item['intent'].lower() or 'thanh_toan' in item['intent'].lower()):
                    has_payment_intent = True
                    print(f"‚úÖ ƒê√£ t√¨m th·∫•y intent thanh to√°n: {item['intent']}")
            
            # Th√™m intent payment_inquiry n·∫øu ch∆∞a c√≥
            if not has_payment_intent:
                nlu_data['nlu'].append({
                    'intent': 'payment_inquiry',
                    'examples': "- thanh to√°n\n- ph∆∞∆°ng th·ª©c thanh to√°n\n- t√¥i c√≥ th·ªÉ thanh to√°n b·∫±ng g√¨\n- tr·∫£ ti·ªÅn b·∫±ng g√¨\n- c√°ch thanh to√°n\n- payment\n- payment method\n- l√†m sao ƒë·ªÉ thanh to√°n\n- thanh to√°n nh∆∞ th·∫ø n√†o\n- thanh to√°n qua th·∫ª\n- thanh to√°n b·∫±ng ti·ªÅn m·∫∑t\n- c√≥ th·ªÉ thanh to√°n online kh√¥ng"
                })
                print("‚úÖ ƒê√£ th√™m intent payment_inquiry")
                modified = True
        
        # Ghi l·∫°i file n·∫øu c√≥ thay ƒë·ªïi
        if modified:
            with open(nlu_file, 'w', encoding='utf-8') as f:
                yaml.dump(nlu_data, f, allow_unicode=True, default_flow_style=False, sort_keys=False)
            print("‚úÖ ƒê√£ l∆∞u thay ƒë·ªïi v√†o nlu.yml")
        else:
            print("‚ÑπÔ∏è Kh√¥ng c·∫ßn thay ƒë·ªïi nlu.yml")
            
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi ki·ªÉm tra nlu.yml: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ th·ª±c hi·ªán vi·ªác s·ª≠a ch·ªØa"""
    print_header("B·∫ÆT ƒê·∫¶U S·ª¨A L·ªñI FILE C·∫§U H√åNH RASA")
    
    # X√°c ƒë·ªãnh ƒë∆∞·ªùng d·∫´n
    chatbot_dir = os.path.join("d:", "DATN", "DATN", "sun-movement-chatbot")
    
    if not os.path.exists(chatbot_dir):
        print(f"‚ùå Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c Rasa t·∫°i {chatbot_dir}")
        sys.exit(1)
    
    # S·ª≠a c√°c file c·∫•u h√¨nh
    fix_domain_file(chatbot_dir)
    fix_config_file(chatbot_dir)
    fix_rules_file(chatbot_dir)
    fix_nlu_file(chatbot_dir)
    
    print_header("ƒê√É HO√ÄN TH√ÄNH VI·ªÜC S·ª¨A L·ªñI FILE C·∫§U H√åNH")
    print("""
C√°c file c·∫•u h√¨nh ƒë√£ ƒë∆∞·ª£c s·ª≠a ch·ªØa v√† s·∫µn s√†ng ƒë·ªÉ train l·∫°i model.
B√¢y gi·ªù b·∫°n c√≥ th·ªÉ ch·∫°y l·ªánh sau ƒë·ªÉ train model:

cd /d d:\\DATN\\DATN\\sun-movement-chatbot
rasa train --force
    """)

if __name__ == "__main__":
    main()
